// AngularJS Multiselect
// https://github.com/namoscato/angular-multiselect
// 
// Version: 1.3.5
// License: MIT
!function(){"use strict";angular.module("amo.multiselect",["ui.bootstrap.dropdown"])}(),function(){"use strict";angular.module("amo.multiselect").constant("amoMultiselectConfig",{deselectAllText:"Deselect All",filterText:"Search...",isDeselectAllEnabled:!0,isDisabled:!1,isFilterEnabled:!0,isSelectAllEnabled:!0,limitTo:500,selectAllText:"Select All",selectedSuffixSingularText:"item",selectedSuffixText:"items",selectText:"Select..."})}(),function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",function(){return{link:function(e,t,l){var n=e.multiselectDropdown;n.getSelectAllLabel=function(){{if(n.state.isSelectAllCheckboxVisible)return n.isAllSelected?n.text.deselectAll:n.text.selectAll;if(n.state.isSelectAllEnabled)return n.text.selectAll}return n.text.deselectAll},n.toggleAllSelectedState=function(){var t;n.isAllSelected=!n.isAllSelected,t=!!n.state.isSelectAllEnabled&&(!n.state.isDeselectAllEnabled||n.isAllSelected);angular.forEach(n.optionsFiltered,function(e){angular.forEach(e,function(e){e.selected=t})}),n.exposeSelectedOptions()},n.toggleSelectedState=function(e){e.selected=!e.selected,n.exposeSelectedOptions()}},restrict:"E",templateUrl:"amo/multiselect/multiselect-dropdown.html"}})}(),function(){"use strict";function e(D,x,A,E,O,v,T){return{link:function(l,e,n,t){var i,o=n.label?x(n.label):angular.noop,s=S("isDeselectAllEnabled",!0),r=S("isSelectAllEnabled",!0),u=[],a=n.onChange?x(n.onChange):angular.noop,c=n.onToggleDropdown?x(n.onToggleDropdown):angular.noop,p=[],d=new E(n.options,l),g=l.$new(),f={name:n.name};function m(e){u.push(d.getLabel(e))}function b(){var n,i,o;u.length=0,f.groupOptions={},f.optionsFiltered={},f.groups=d.getGroups(),angular.forEach(d.getOptions(),function(e,l){angular.forEach(e,function(e,t){for(i=!1,o=d.getValue(e),n=0;n<p.length;n++)if(angular.equals(p[n],o)){i=!0,m(e);break}angular.isUndefined(f.groupOptions[l])&&(f.groupOptions[l]=[]),f.groupOptions[l].push({id:t,label:d.getLabel(e),value:o,selected:i})})}),h()}function w(){return p.length}function S(e,t){return angular.isDefined(n[e])?t?x(n[e])(l):n[e]:O[e]}function h(){var e;return e=0===p.length?n.selectText||O.selectText:0<u.length&&angular.isDefined(u[0])?v.joinLabels(u):v.pluralize(p.length,n.selectedSuffixText,n.selectedSuffixSingularText||n.selectedSuffixText),f.selectedLabel=e,angular.isFunction(o.assign)&&o.assign(l,e),e}(g.multiselectDropdown=f).groups=[],f.groupOptions={},f.optionsFiltered={},f.filter={},f.limit=S("limitTo",!0),f.state={isDeselectAllEnabled:s,isFilterEnabled:S("isFilterEnabled",!0),isSelectAllEnabled:r,isSelectAllVisible:r||s,isSelectAllCheckboxVisible:r&&s},f.text={deselectAll:S("deselectAllText"),filter:S("filterText"),selectAll:S("selectAllText")},f.countOptionsAfterLimit=function(e){if(angular.isUndefined(f.limit))return 0;var t=f.optionsFiltered[e].length-f.limit;return 0<t?t:0},f.exposeSelectedOptions=function(){var n;u.length=0,p=[],angular.forEach(f.groupOptions,function(e,l){angular.forEach(e,function(e,t){e.selected&&(m(n=d.getOption(t,l)),p.push(d.getValue(n)))})}),i=!0,t.$setViewValue(p),a(g,{label:h()})},f.getSelectedCount=w,f.hasSelectedMultipleItems=function(){return 1<w()},f.isGroupVisible=function(e){return!!d.isGrouped()&&0<T(f.groupOptions[e],f.filter).length},f.isSelectAllToggleDisabled=function(){{if(!r)return 0===p.length;if(!s)return p.length===d.getOptionsCount()}return!1},f.onToggleDropdown=function(e){e||A(function(){f.filter={}});c(g,{isOpen:e})},function(){e.append(D("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(g)),l.$on("$destroy",function(){g.$destroy()}),l.$watch(d.getOptionsExpression(),function(e){d.setOptions(e),b()},!0),n.isDisabled&&l.$watch(n.isDisabled,function(e){f.state.isDisabled=Boolean(e)});l.$watch(function(){return t.$modelValue},function(e){i?i=!1:(p=angular.isArray(e)?e:[],b())},!0),t.$isEmpty=function(e){return!angular.isArray(e)||0===e.length},angular.isDefined(f.limit)&&!Boolean(f.limit)&&(f.limit=void 0)}()},require:"ngModel",restrict:"E"}}e.$inject=["$compile","$parse","$timeout","AmoMultiselectFactory","amoMultiselectConfig","amoMultiselectFormatService","filterFilter"],angular.module("amo.multiselect").directive("amoMultiselect",e)}(),function(){"use strict";function e(r){var u=/^\s*(?:([\s\S]+?)\s+as\s+)?([\s\S]+?)(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+([\$\w][\$\w]*)\s+in\s+([\s\S]+?)\s*$/;return function(t,l){var n,e=this;function i(e){return s()?n.groupFunction(l,o(e)):null}function o(e){var t={};return t[n.value]=e,t}function s(){return null!==n.groupFunction}return e.getGroup=i,e.getGroups=function(e){return n.groups},e.getLabel=function(e){return n.labelFunction(l,o(e))},e.getOption=function(e,t){angular.isUndefined(t)&&(t=null);return n.groupOptions[t][e]},e.getOptions=function(){return n.groupOptions},e.getOptionsCount=function(){return n.optionsCount},e.getOptionsExpression=function(){return n.optionsExpression},e.getValue=function(e){return n.selectFunction(l,o(e))},e.isGrouped=s,e.setOptions=function(e){var t;if(angular.isArray(e))return n.groups=[],n.groupOptions={},n.optionsCount=e.length,e.forEach(function(e){t=i(e),angular.isUndefined(n.groupOptions[t])&&(n.groups.push(t),n.groupOptions[t]=[]),n.groupOptions[t].push(e)}),n.groupOptions;throw new Error('Expected "'+n.optionsExpression+'" to be Array')},function(){var e=t.match(u);if(null===e)throw new Error('Expected "'+t+'" to be in form of "[_select_ as] _label_ [group by _group_] for _value_ in _array_"');n={groupFunction:angular.isDefined(e[3])?r(e[3]):null,labelFunction:r(e[2]),optionsExpression:e[5],selectFunction:r(angular.isDefined(e[1])?e[1]:e[4]),value:e[4]}}(),e}}e.$inject=["$parse"],angular.module("amo.multiselect").factory("AmoMultiselectFactory",e)}(),function(){"use strict";function e(i){this.joinLabels=function(e){var t,l;if(1===e.length)return e[0];l=e.pop(),t=e.join(", "),1<e.length&&(t+=",");return t+" and "+l},this.pluralize=function(e,t,l){var n=e+" ";n+=1===e?l||i.selectedSuffixSingularText:t||i.selectedSuffixText;return n}}e.$inject=["amoMultiselectConfig"],angular.module("amo.multiselect").service("amoMultiselectFormatService",e)}(),angular.module("amo.multiselect").run(["$templateCache",function(e){e.put("amo/multiselect/multiselect-dropdown.html",'<div class="btn-group btn-group-multiselect" auto-close="outsideClick" ng-attr-title="{{ multiselectDropdown.selectedLabel }}" ng-class="{ \'state-selected-multiple\': multiselectDropdown.hasSelectedMultipleItems() }" on-toggle="multiselectDropdown.onToggleDropdown(open)" uib-dropdown> <button type="button" class="btn btn-default" ng-attr-id="{{:: multiselectDropdown.name }}" ng-disabled="multiselectDropdown.state.isDisabled" uib-dropdown-toggle> <span class="text" ng-bind="multiselectDropdown.selectedLabel"></span> <span class="badge" ng-bind="multiselectDropdown.getSelectedCount()"></span> <span class="caret"></span> </button> <div uib-dropdown-menu> <input type="text" class="form-control" ng-if="::multiselectDropdown.state.isFilterEnabled" ng-model="multiselectDropdown.filter.label" placeholder="{{ ::multiselectDropdown.text.filter }}"> <ul class="dropdown-menu-list list-unstyled"> <li ng-if="::multiselectDropdown.state.isSelectAllVisible"> <a ng-class="{ \'text-muted\': multiselectDropdown.isSelectAllToggleDisabled() }" ng-click="multiselectDropdown.toggleAllSelectedState()"> <input type="checkbox" ng-if="::multiselectDropdown.state.isSelectAllCheckboxVisible" ng-model="multiselectDropdown.isAllSelected"> <span ng-bind="multiselectDropdown.getSelectAllLabel()"></span> </a> </li> <li class="divider" ng-if="::multiselectDropdown.state.isSelectAllVisible"></li> <li class="dropdown-header" ng-bind="group" ng-if="multiselectDropdown.isGroupVisible(group)" ng-repeat-start="group in multiselectDropdown.groups"> </li> <li ng-repeat="option in (multiselectDropdown.optionsFiltered[group] = (multiselectDropdown.groupOptions[group] | filter : multiselectDropdown.filter)) | limitTo: multiselectDropdown.limit"> <a ng-attr-title="{{ option.label }}" ng-click="multiselectDropdown.toggleSelectedState(option)"> <input type="checkbox" ng-model="option.selected"> <span ng-bind="option.label"></span> </a> </li> <li class="dropdown-is-over-limit" ng-class="{ \'dropdown-is-group-limit\': group !== null }" ng-show="multiselectDropdown.countOptionsAfterLimit(group)"> <span ng-bind="multiselectDropdown.countOptionsAfterLimit(group)"></span> more result(s).<span ng-if="::multiselectDropdown.state.isFilterEnabled"><br>Search to reveal more.</span> </li> <li ng-repeat-end></li> </ul> </div> </div> ')}]);